name: 'Terraform'

on:
  workflow_dispatch:
  repository_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: |
        export TF_VAR_do_token=${{ secrets.DO_TOKEN }}
        terraform plan
    - name: Terraform Apply
      run: |
        export TF_VAR_do_token=${{ secrets.DO_TOKEN }}
        terraform apply -auto-approve
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh/
        echo "$SSH_KEY" > ~/.ssh/deploy.key
        chmod 600 ~/.ssh/deploy.key 
        cat >>~/.ssh/config <<END
        Host *.clustercat.com
          User root
          IdentityFile ~/.ssh/deploy.key
          StrictHostKeyChecking no
        END
      env:
          SSH_KEY: ${{ secrets.TESTING_SSH_KEY }}
    - name: Perform Automation
      run: |
          cd automation
          #wait for bit
          sleep 10
          ./init.sh
          sleep 60
    - name: Destroy Resources
      if: always()
      run :
        export TF_VAR_do_token=${{ secrets.DO_TOKEN }}
        terraform destroy


        
